let 
    type intArray = array of int
    type intTab = array of intArray
    type stringArray = array of string

    type position = {board : intTab, stringArray : moveList, moveCount : int, turn : string}

    var emptyLine:= intArray [8] of 0
    var board := intTab [8] of emptyLine
    var turn := "white"
    var moveCount := 0
    var moveList := stringArray [moveCount*2 +2] of "none"

    /* Move format : 'bxc3', 'Nbd5', 'O-O-O', ...*/

    function init(board:intTab) =
        for i := 0 to 7 do
            for j:= 0 to 7 do
                (board[i][j] := 0)
    
    function setTileValue(board:intTab,case : int, value : int) =
        let
            var ligne :int := 0
            var colonne :int := 0
        in
            ligne := (case / 8);
            colonne := case - ligne*8;
            board[ligne][colonne] := value
        end
    
    function getTileValue(board:intTab,case:int) :int = 
        let
            var ligne :int := 0
            var colonne :int := 0
        in
            ligne := (case / 8);
            colonne := case - ligne*8;
            board[ligne][colonne]
        end



    function getLastMove(moveList : stringArray, moveCount:int, turn:string) : string = 
        let
            var n := moveCount*2
        in
            if (turn = "white") then
                (n := n)
            else 
                (n := n +1)
            ;
            moveList[n]
        end

    function isTileInCheck(board: intTab, case:int, color : int) :int = 
        /* Color : 1 for white, -1 for black */
        let
            var retour:= -1
        in
            0
        end

    function isCastleAllowed(board: intTab, moveList : stringArray, moveCount : int, turn : string, side : int, color : int) :int = 
        /* Side : 0 for king size castling, 1 for queen side castling ; Color : 1 for white, -1 for black */
        let
            var retour := -1
            var bannedMoves := stringArray [100] of "none"
        in
            0
        end



    function findFirstNonZero(board:intTab) :int = 
        let 
            var state :int := 0
            var count :int := 0
            var temp :int := 0
            var retour := 0
            var test:= 0
        in 
            let
                var test := 0
            in
                while not(state) do
                    (
                    temp := getTileValue(board,count);
                    if temp <> 0
                        then 
                            (
                            retour := count;
                            state := 1;
                            break
                            )
                        else
                            (
                            count := count +1
                            )
                    ;
                    if count > 63
                        then
                        (
                        retour := -1;
                        state = 1
                        )
                    );
                retour
            end
        end
in
    init(board)
end
